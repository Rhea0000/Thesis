#Retriever parameter Settings
Search_type: "mmr"
Search_kwargs: 10

#LLM parameter Settings
Max_length: 8192
Max_new_totkens: 4048

#Chunks settings
Chunk_size: 256
Chunk_overlap: 20

document_path: r"C:\Users\y1kel\Documents\Master IS\Thesis\Dataset\3. The Network Model — EPANET 2.2 documentation.pdf"

#LLM models
# llm= HuggingFaceHub(
#     repo_id="huggingfaceh4/zephyr-7b-alpha",
#     model_kwargs={"temperature": 0.5, "max_length": Max_length,"max_new_tokens":Max_new_totkens}
# )

# llm= HuggingFaceHub(
#     repo_id="huggingfaceh4/zephyr-7b-beta",
#     model_kwargs={"temperature": 0.5, "max_length": Max_length,"max_new_tokens":Max_new_totkens}
# )

# llm= ChatOpenAI(model_name="gpt-4-0125-preview", temperature=0.5)
llm: ChatOpenAI(model_name="gpt-3.5-turbo-0125", temperature=0.5)

#Embedding models
embeddings: OpenAIEmbeddings()

# embeddings=HuggingFaceInferenceAPIEmbeddings(
#     api_key=HF_TOKEN, model_name="BAAI/bge-base-en-v1.5"
# )

#System template
template: |
  You are an AI assistant that follows instruction extremely well. Please give direct and complete answers. Please be truthful, if you don't know the answer, just say that you don't know, don't try to make up an answer or return the wrong answer.

  {query}
  <|Assistant

#Retry 
Max_retries: 3

#Keyword, change based on the model. If your model is from Hugging face, please set it to "Assistant". If your model is from Open AI. please set it to "json".
keyword: json

# Quries
# QueryQ1: |
#   We are creating an ontology in the water distribution network domain. 
#   The first step involves creating a domain-specific terminology, or list of terms characterizing the domain at hand. 
#   This is a preliminary step to start identifying domain knowledge and drawing the boundaries of the observed domain. 
#   The outcome of this step should be a domain lexicon, or information structure used to answer questions 
#   "What are the physical components typically needed while building drinking water distribution networks when the network could be modeled as a collection of links connected to nodes?" 
#   This is the provided template for your output: {"ENTITY": "DEFINITIONS"}.
#   Everything in all caps is a placeholder. Any time that you generate the entity and definition, try to fit it into the placeholders that I list.

QueryQ1: |
  We are creating an ontology in the water distribution network domain. 
  The first step involves creates a domain-specific terminology, or list of terms characterizing the domain at hand. This is a preliminary step to start identifying domain knowledge and drawing the boundaries of the observed domain. The network could be modeled as a collection of links connected to nodes. The outcome of this step should be a domain lexicon, or information structure used to answer question "What are the physical components typically used while building drinking water distribution networks?" 
  Provide the output in a Python dictionary format suitable for direct iteration within a Python for loop, structured as {"Entity": "Definition of the entity"}, with no additional explanations outside of the dictionary.

QueryQ234: |
  We are creating the ontology in the drinking water distribution network domain. 
  Step 2,3,4 involves creating Synonyms, Taxonomy, or Predication for the input entity: {term} : {definition} based on the step descriptions. 
  There should not be any repeated answer between steps 2, 3, 4. A term can be either Synonyms, Taxonomy, or Predication.
  Step 2: Provide 0-2 domain glossary (synonyms) for input entity. The terms of the lexicon associated with a textual description, indicating also possible synonyms; Having produced a first lexicon, you could, in this step, enrich it by associating a textual description with each entry. You can enrich the lexicon by associating a textual description with each entry. In identifying synonyms it is necessary to pinpoint the "preferred term" and label the others as synonyms. 
  Step 3: Provide taxonomy for the input entity. Domain terms organized in a generalization/specialization (ISA) hierarchy; The first is a taxonomy based on the specialization relation, or the ISA relationship connecting a more specific concept to a more general one (such as invoice ISA business document). You must not only identify ISA relations between existing terms but also introduce more abstract terms or generic concepts seldom used in everyday life but that are extremely useful in organizing knowledge. During this step you thus provide feedback to the two previous knowledge levels—lexicon and glossary—since taxonomy building is also an opportunity to validate the two previous levels and extend them with new terms. You must find a good balance between the breadth of the taxonomy, or average number of children of intermediate nodes, and its depth, or levels of specialization and the granularity of taxonomy leaves. 
  Step 4: Provide predication (CP,AP,RP) for input entity. Terms representing properties from the glossary identified and connected to the entities they characterize; This step is similar to a database design activity, as it concentrates on the properties that, in the domain at hand, characterize the relevant entities. You generally identify atomic properties (AP) and complex properties (CP). The former can be seen as printable data fields (such as unit price), and the latter exhibit an internal structure and have components (such as address composed of, say, street, city, postal code, and state). Finally, if a property refers to other entities (such as a customer referred to in an invoice) it is called a reference property (RP). In a relational database, an RP is represented by a foreign key. The resulting predicate hierarchy is organized with the entity at the top, then a property hierarchy below it, where nodes are tagged with CP, AP, and RP. 
  Please return the answer in the python dictionary format {"SYNONYMS":[],"TAXONOMY":[],"PREDICATION":[]} and refrain from adding any commentary outside or nested dictionaries or specify the entity within it. 
  

QueryQ5: |
    We are creating the ontology in the drinking water distribution network domain. Step 5 involves relationships mapping for the input entities: {ResultQ1}. 
    Step 5: Parthood (meronymy). Complex entity names connected to their components, with all names needing to be present in the glossary; This step concentrates on the 'architectural' structure of business entities, or parts of composite entities, whether objects, processes, or actors, by eliciting their decomposition hierarchy (or part-whole hierarchy). To this end, you would analyze the structure and components an entity exhibits, creating the hierarchy based on the partOf (inverse hasPart) relationship. Parthood can also be applied to immaterial entities (such as a regulation subdivided into sections and articles or a process subdivided into sub-processes and activities). 
    Please identify and map the clear relationships between entities, ensuring that no conflicting relationships exist. For example, avoid situations where entity A is considered a part of entity B while simultaneously entity B is also considered a part of entity A. 

QueryQ6: |
    We are creating the ontology in the drinking water distribution network domain. Step 6 involves creating the OWL schema based on the input: {ResultQ5}.
    Step 6: Please produce the formally encoded ontology by using, say, the Web Ontology Language, or OWL, containing the conceptual knowledge collected input.

    When constructing an ontology schema in OWL, follow these steps: 1) Define prefixes for readability. 2) Create classes to represent entities. 3) Organize classes hierarchically using subclass relationships. 
    Please return the OWL encompassing all classes and relationships, excluding any explanatory text.
    Here is a simple example in OWL: 
    # Define prefixes
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix owl: <http://www.w3.org/2002/07/owl#> .
    @prefix ex: <http://example.org/ontology#> .

    # Create classes and relationships
    ex:Animal rdf:type owl:Class .
    ex:Mammal rdf:type owl:Class;
        rdfs:subClassOf ex:Animal.

QueryQ7: |
  We are creating the ontology in the drinking water distribution network domain.  Step 7 is ontology finalization, which integrates the knowledge gathered in previous steps: step 2 (Synonyms), step 3 (Taxonomy), and step 4 (Predication). The results from these steps are stored in the dictionary {term}:{dic}. This in the ontology schema: {ResultQ6}. 
  Your task is formally encoding the previous result and combine it with the provided ontology schema. When generating the answers, you need to keep everything from ontology schema, but you don't need to provide any explanation. You should provide a complete ontology by repeating these steps:
  1. Identify the key of the input, which represents the entity in the ontology, and use it as the class name in the OWL ontology.
  2. Define equivalent classes (e.g. equivalentClass) for each entity based on synonyms. Two classes may be stated to be equivalent.
  3. Incorporate the taxonomy of each entity as relationships (e.g. rdfs:subClassOf). Class hierarchies may be created by making one or more statements that a class is a subclass of another class. 
  4. Define properties (e.g. rdf:Property:) for each entity based on predication. Properties can be used to state relationships between individuals or from individuals to data values. Examples of properties include hasChild, hasRelative, hasSibling, and hasAge. If there are repetitive properties between entities, you can simply add information on top of existing properties rather than creating duplicates. 
  Here is an example of encoded information:
  @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
  @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
  @prefix owl: <http://www.w3.org/2002/07/owl#> .
  @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
  @prefix ex: <http://example.org/> .

  # Equivalent Classes
  ex:Person rdf:type owl:Class.

  ex:Individual rdf:type owl:Class ;
      owl:equivalentClass ex:Person.

  # Taxonomy Relationships
  ex:Employee rdf:type owl:Class ;
      rdfs:subClassOf ex:Person.

  # Properties
  ex:hasChild rdf:type owl:ObjectProperty ;
      rdfs:domain ex:Person.

  ex:hasAge rdf:type owl:DatatypeProperty ;
      rdfs:domain ex:Person.